package frc.robot.subsystems.drive;

import static edu.wpi.first.units.Units.*;
import static frc.robot.ConstantsKt.ALT_ROBORIO_SERIAL;
import static frc.robot.ConstantsKt.SWERVE_CANBUS_NAME;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.*;
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;
import edu.wpi.first.units.measure.*;
import frc.robot.ConstantsKt;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
    private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

    private static final CANcoderConfiguration cancoderInitialConfigs = new CANcoderConfiguration();
    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private static final Pigeon2Configuration pigeonConfigs = null;

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    public static CANBus kCANBus;

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    public static LinearVelocity kSpeedAt12Volts;
    public static AngularVelocity kMaxOmegaVelocity;

    public static SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants();

    public static SwerveModuleConstants<
                    TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
            FrontLeft;
    public static SwerveModuleConstants<
                    TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
            FrontRight;
    public static SwerveModuleConstants<
                    TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
            BackLeft;
    public static SwerveModuleConstants<
                    TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
            BackRight;

    public static void init() {
        // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
        // This may need to be tuned to your individual robot
        double kCoupleRatio;
        double kDriveGearRatio;
        double kSteerGearRatio;
        Distance kWheelRadius;
        boolean kInvertLeftSide;
        boolean kInvertRightSide;
        int kPigeonId;
        SwerveModuleConstants.DriveMotorArrangement kDriveMotorType;
        SwerveModuleConstants.SteerMotorArrangement kSteerMotorType;
        // These are only used for simulation
        double kSteerInertia;
        double kDriveInertia;
        // Simulated voltage necessary to overcome friction
        Voltage kSteerFrictionVoltage;
        Voltage kDriveFrictionVoltage;
        // Front Left
        int kFrontLeftDriveMotorId;
        int kFrontLeftSteerMotorId;
        int kFrontLeftEncoderId;
        Angle kFrontLeftEncoderOffset;
        boolean kFrontLeftSteerMotorInverted;
        boolean kFrontLeftCANcoderInverted;
        Distance kFrontLeftXPos;
        Distance kFrontLeftYPos;
        // Front Right
        int kFrontRightDriveMotorId;
        int kFrontRightSteerMotorId;
        int kFrontRightEncoderId;
        Angle kFrontRightEncoderOffset;
        boolean kFrontRightSteerMotorInverted;
        boolean kFrontRightCANcoderInverted;
        Distance kFrontRightXPos;
        Distance kFrontRightYPos;
        // Back Left
        int kBackLeftDriveMotorId;
        int kBackLeftSteerMotorId;
        int kBackLeftEncoderId;
        Angle kBackLeftEncoderOffset;
        boolean kBackLeftSteerMotorInverted;
        boolean kBackLeftCANcoderInverted;
        Distance kBackLeftXPos;
        Distance kBackLeftYPos;
        // Back Right
        int kBackRightDriveMotorId;
        int kBackRightSteerMotorId;
        int kBackRightEncoderId;
        Angle kBackRightEncoderOffset;
        boolean kBackRightSteerMotorInverted;
        boolean kBackRightCANcoderInverted;
        Distance kBackRightXPos;
        Distance kBackRightYPos;
        // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
        // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
        TalonFXConfiguration steerInitialConfigs;
        TalonFXConfiguration driveInitialConfigs;
        CANcoderConfiguration encoderInitialConfigs;
        // The stator current at which the wheels start to slip;
        // This needs to be tuned to your individual robot
        Current kSlipCurrent;
        // The closed-loop output type to use for the drive motors;
        // This affects the PID/FF gains for the drive motors
        ClosedLoopOutputType kDriveClosedLoopOutput;
        // The closed-loop output type to use for the steer motors;
        // This affects the PID/FF gains for the steer motors
        ClosedLoopOutputType kSteerClosedLoopOutput;
        // When using closed-loop control, the drive motor uses the control
        // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
        Slot0Configs driveGains;
        // The steer motor uses any SwerveModule.SteerRequestType control request with the
        // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
        Slot0Configs steerGains;
        double[] offsets;
        if (ConstantsKt.getROBORIO_SERIAL_NUMBER().equals(ALT_ROBORIO_SERIAL)) {
            offsets =
                    new double[] {
                        1.9374177350995647,
                        2.868544073346149,
                        -0.2162912910918754,
                        1.1244079175201749
                    };

            steerGains =
                    new Slot0Configs()
                            .withKP(22.792)
                            .withKI(0)
                            .withKD(2.207)
                            .withKS(0)
                            .withKV(0.22717)
                            .withKA(0.1124)
                            .withStaticFeedforwardSign(
                                    StaticFeedforwardSignValue.UseClosedLoopSign);
            driveGains =
                    new Slot0Configs()
                            .withKP(1.5)
                            .withKI(0)
                            .withKD(0)
                            .withKS(0.40655)
                            .withKV(0.54606);

            kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
            kDriveClosedLoopOutput = ClosedLoopOutputType.Voltage;

            kSlipCurrent = Amps.of(78.0);
            kMaxOmegaVelocity = RadiansPerSecond.of(7);

            driveInitialConfigs = new TalonFXConfiguration();
            steerInitialConfigs =
                    new TalonFXConfiguration()
                            .withCurrentLimits(
                                    new CurrentLimitsConfigs()
                                            .withStatorCurrentLimit(60)
                                            .withStatorCurrentLimitEnable(true));
            encoderInitialConfigs = new CANcoderConfiguration();

            kCANBus = new CANBus(SWERVE_CANBUS_NAME, "./logs/example.hoot");

            kSpeedAt12Volts = MetersPerSecond.of(3.5);

            kDriveMotorType = SwerveModuleConstants.DriveMotorArrangement.TalonFX_Integrated;
            kSteerMotorType = SwerveModuleConstants.SteerMotorArrangement.TalonFX_Integrated;

            kCoupleRatio = 3.5;

            kDriveGearRatio = 4.41;
            kSteerGearRatio = 11.3142;
            kWheelRadius = Centimeter.of(5.1);

            kInvertLeftSide = true;
            kInvertRightSide = true;

            kPigeonId = 1;

            // These are only used for simulation
            kSteerInertia = 0.004;
            kDriveInertia = 0.025;
            // Simulated voltage necessary to overcome friction
            kSteerFrictionVoltage = Volts.of(0.25);
            kDriveFrictionVoltage = Volts.of(0.25);

            // Front Left
            kFrontLeftDriveMotorId = AltSwervePorts.FRONT_LEFT_DRIVE_MOTOR_ID;
            kFrontLeftSteerMotorId = AltSwervePorts.FRONT_LEFT_ANGLE_MOTOR_ID;
            kFrontLeftEncoderId = AltSwervePorts.FRONT_LEFT_ENCODER_ID;
            kFrontLeftEncoderOffset = Radians.of(-offsets[0]);
            kFrontLeftSteerMotorInverted = true;
            kFrontLeftCANcoderInverted = false;

            kFrontLeftXPos = Meters.of(0.24);
            kFrontLeftYPos = Meters.of(0.24);

            // Front Right
            kFrontRightDriveMotorId = AltSwervePorts.FRONT_RIGHT_DRIVE_MOTOR_ID;
            kFrontRightSteerMotorId = AltSwervePorts.FRONT_RIGHT_ANGLE_MOTOR_ID;
            kFrontRightEncoderId = AltSwervePorts.FRONT_RIGHT_ENCODER_ID;
            kFrontRightEncoderOffset = Radians.of(-offsets[1]);
            kFrontRightSteerMotorInverted = true;
            kFrontRightCANcoderInverted = false;

            kFrontRightXPos = Meters.of(0.24);
            kFrontRightYPos = Meters.of(-0.24);

            // Back Left
            kBackLeftDriveMotorId = AltSwervePorts.REAR_LEFT_DRIVE_MOTOR_ID;
            kBackLeftSteerMotorId = AltSwervePorts.REAR_LEFT_ANGLE_MOTOR_ID;
            kBackLeftEncoderId = AltSwervePorts.REAR_LEFT_ENCODER_ID;
            kBackLeftEncoderOffset = Radians.of(-offsets[2]);
            kBackLeftSteerMotorInverted = true;
            kBackLeftCANcoderInverted = false;

            kBackLeftXPos = Meters.of(-0.24);
            kBackLeftYPos = Meters.of(0.24);

            // Back Right
            kBackRightDriveMotorId = AltSwervePorts.REAR_RIGHT_DRIVE_MOTOR_ID;
            kBackRightSteerMotorId = AltSwervePorts.REAR_RIGHT_ANGLE_MOTOR_ID;
            kBackRightEncoderId = AltSwervePorts.REAR_RIGHT_ENCODER_ID;
            kBackRightEncoderOffset = Radians.of(-offsets[3]);
            kBackRightSteerMotorInverted = true;
            kBackRightCANcoderInverted = false;

            kBackRightXPos = Meters.of(-0.24);
            kBackRightYPos = Meters.of(-0.24);
        } else {
            offsets =
                    new double[] {
                        -3.0587576910439687,
                        -0.5092816215780329,
                        -1.5493205957644975,
                        0.010737865515199488
                    };

            steerGains =
                    new Slot0Configs()
                            .withKP(22.792)
                            .withKI(0)
                            .withKD(2.207)
                            .withKS(0)
                            .withKV(0.22717)
                            .withKA(0.1124)
                            .withStaticFeedforwardSign(
                                    StaticFeedforwardSignValue.UseClosedLoopSign);
            driveGains =
                    new Slot0Configs()
                            .withKP(1.5)
                            .withKI(0)
                            .withKD(0)
                            .withKS(0.40655)
                            .withKV(0.54606);

            kSteerClosedLoopOutput = ClosedLoopOutputType.Voltage;
            kDriveClosedLoopOutput = ClosedLoopOutputType.Voltage;

            kSlipCurrent = Amps.of(78.0);
            kMaxOmegaVelocity = RadiansPerSecond.of(7);

            driveInitialConfigs = new TalonFXConfiguration();
            steerInitialConfigs =
                    new TalonFXConfiguration()
                            .withCurrentLimits(
                                    new CurrentLimitsConfigs()
                                            .withStatorCurrentLimit(60)
                                            .withStatorCurrentLimitEnable(true));
            encoderInitialConfigs = new CANcoderConfiguration();

            kCANBus = new CANBus(SWERVE_CANBUS_NAME, "./logs/example.hoot");

            kSpeedAt12Volts = MetersPerSecond.of(3.5);

            kDriveMotorType = SwerveModuleConstants.DriveMotorArrangement.TalonFX_Integrated;
            kSteerMotorType = SwerveModuleConstants.SteerMotorArrangement.TalonFX_Integrated;

            kCoupleRatio = 3.5;

            kDriveGearRatio = 1.0 / ((10.0 / 34.0) * (28.0 / 18.0) * (15.0 / 45.0));
            kSteerGearRatio = 11.3142;
            kWheelRadius = Centimeter.of(5.1);

            kInvertLeftSide = true;
            kInvertRightSide = true;

            kPigeonId = 1;

            // These are only used for simulation
            kSteerInertia = 0.004;
            kDriveInertia = 0.025;
            // Simulated voltage necessary to overcome friction
            kSteerFrictionVoltage = Volts.of(0.25);
            kDriveFrictionVoltage = Volts.of(0.25);

            // Front Left
            kFrontLeftDriveMotorId = SwervePorts.FRONT_LEFT_DRIVE_MOTOR_ID;
            kFrontLeftSteerMotorId = SwervePorts.FRONT_LEFT_ANGLE_MOTOR_ID;
            kFrontLeftEncoderId = SwervePorts.FRONT_LEFT_ENCODER_ID;
            kFrontLeftEncoderOffset = Radians.of(-offsets[0]);
            kFrontLeftSteerMotorInverted = true;
            kFrontLeftCANcoderInverted = false;

            kFrontLeftXPos = Meters.of(0.24);
            kFrontLeftYPos = Meters.of(0.24);

            // Front Right
            kFrontRightDriveMotorId = SwervePorts.FRONT_RIGHT_DRIVE_MOTOR_ID;
            kFrontRightSteerMotorId = SwervePorts.FRONT_RIGHT_ANGLE_MOTOR_ID;
            kFrontRightEncoderId = SwervePorts.FRONT_RIGHT_ENCODER_ID;
            kFrontRightEncoderOffset = Radians.of(-offsets[1]);
            kFrontRightSteerMotorInverted = true;
            kFrontRightCANcoderInverted = false;

            kFrontRightXPos = Meters.of(0.24);
            kFrontRightYPos = Meters.of(-0.24);

            // Back Left
            kBackLeftDriveMotorId = SwervePorts.REAR_LEFT_DRIVE_MOTOR_ID;
            kBackLeftSteerMotorId = SwervePorts.REAR_LEFT_ANGLE_MOTOR_ID;
            kBackLeftEncoderId = SwervePorts.REAR_LEFT_ENCODER_ID;
            kBackLeftEncoderOffset = Radians.of(-offsets[2]);
            kBackLeftSteerMotorInverted = true;
            kBackLeftCANcoderInverted = false;

            kBackLeftXPos = Meters.of(-0.24);
            kBackLeftYPos = Meters.of(0.24);

            // Back Right
            kBackRightDriveMotorId = SwervePorts.REAR_RIGHT_DRIVE_MOTOR_ID;
            kBackRightSteerMotorId = SwervePorts.REAR_RIGHT_ANGLE_MOTOR_ID;
            kBackRightEncoderId = SwervePorts.REAR_RIGHT_ENCODER_ID;
            kBackRightEncoderOffset = Radians.of(-offsets[3]);
            kBackRightSteerMotorInverted = true;
            kBackRightCANcoderInverted = false;

            kBackRightXPos = Meters.of(-0.24);
            kBackRightYPos = Meters.of(-0.24);
        }

        DrivetrainConstants =
                new SwerveDrivetrainConstants()
                        .withCANBusName(kCANBus.getName())
                        .withPigeon2Id(kPigeonId)
                        .withPigeon2Configs(pigeonConfigs);

        SwerveModuleConstantsFactory<
                        TalonFXConfiguration, TalonFXConfiguration, CANcoderConfiguration>
                ConstantCreator =
                        new SwerveModuleConstantsFactory<
                                        TalonFXConfiguration,
                                        TalonFXConfiguration,
                                        CANcoderConfiguration>()
                                .withDriveMotorGearRatio(kDriveGearRatio)
                                .withSteerMotorGearRatio(kSteerGearRatio)
                                .withCouplingGearRatio(kCoupleRatio)
                                .withWheelRadius(kWheelRadius)
                                .withSteerMotorGains(steerGains)
                                .withDriveMotorGains(driveGains)
                                .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
                                .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
                                .withSlipCurrent(kSlipCurrent)
                                .withSpeedAt12Volts(kSpeedAt12Volts)
                                .withDriveMotorType(kDriveMotorType)
                                .withSteerMotorType(kSteerMotorType)
                                .withFeedbackSource(kSteerFeedbackType)
                                .withDriveMotorInitialConfigs(driveInitialConfigs)
                                .withSteerMotorInitialConfigs(steerInitialConfigs)
                                .withEncoderInitialConfigs(encoderInitialConfigs)
                                .withSteerInertia(kSteerInertia)
                                .withDriveInertia(kDriveInertia)
                                .withSteerFrictionVoltage(kSteerFrictionVoltage)
                                .withDriveFrictionVoltage(kDriveFrictionVoltage);

        FrontLeft =
                ConstantCreator.createModuleConstants(
                        kFrontLeftSteerMotorId,
                        kFrontLeftDriveMotorId,
                        kFrontLeftEncoderId,
                        kFrontLeftEncoderOffset,
                        kFrontLeftXPos,
                        kFrontLeftYPos,
                        kInvertLeftSide,
                        kFrontLeftSteerMotorInverted,
                        kFrontLeftCANcoderInverted);

        FrontRight =
                ConstantCreator.createModuleConstants(
                        kFrontRightSteerMotorId,
                        kFrontRightDriveMotorId,
                        kFrontRightEncoderId,
                        kFrontRightEncoderOffset,
                        kFrontRightXPos,
                        kFrontRightYPos,
                        kInvertRightSide,
                        kFrontRightSteerMotorInverted,
                        kFrontRightCANcoderInverted);

        BackLeft =
                ConstantCreator.createModuleConstants(
                        kBackLeftSteerMotorId,
                        kBackLeftDriveMotorId,
                        kBackLeftEncoderId,
                        kBackLeftEncoderOffset,
                        kBackLeftXPos,
                        kBackLeftYPos,
                        kInvertLeftSide,
                        kBackLeftSteerMotorInverted,
                        kBackLeftCANcoderInverted);

        BackRight =
                ConstantCreator.createModuleConstants(
                        kBackRightSteerMotorId,
                        kBackRightDriveMotorId,
                        kBackRightEncoderId,
                        kBackRightEncoderOffset,
                        kBackRightXPos,
                        kBackRightYPos,
                        kInvertRightSide,
                        kBackRightSteerMotorInverted,
                        kBackRightCANcoderInverted);
    }
    // /**
    //  * Creates a CommandSwerveDrivetrain instance.
    //  * This should only be called once in your robot program,.
    //  */
    // public static CommandSwerveDrivetrain createDrivetrain() {
    //     return new CommandSwerveDrivetrain(
    //         DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight
    //     );
    // }
}
